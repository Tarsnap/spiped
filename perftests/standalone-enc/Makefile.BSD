# Program name.
PROG	=	test_standalone_enc

# Don't install it.
NOINST	=	1

# Library code required
LDADD_REQ	=	-lcrypto

# Useful relative directories
LIBCPERCIVA_DIR	=	../../libcperciva
PROTO_DIR	=	../../proto

# Main test code
SRCS	=	main.c

# spipe protocol
.PATH.c	:	${PROTO_DIR}
SRCS	+=	proto_crypt.c
IDIRS	+=	-I${PROTO_DIR}

# Fundamental algorithms
.PATH.c	:	${LIBCPERCIVA_DIR}/alg
SRCS	+=	sha256.c
SRCS	+=	sha256_shani.c
IDIRS	+=	-I${LIBCPERCIVA_DIR}/alg

# CPU features detection
.PATH.c	:	${LIBCPERCIVA_DIR}/cpusupport
SRCS	+=	cpusupport_x86_aesni.c
SRCS	+=	cpusupport_x86_rdrand.c
SRCS	+=	cpusupport_x86_shani.c
SRCS	+=	cpusupport_x86_ssse3.c
IDIRS	+=	-I${LIBCPERCIVA_DIR}/cpusupport

# Crypto code
.PATH.c	:	${LIBCPERCIVA_DIR}/crypto
SRCS	+=	crypto_aes.c
SRCS	+=	crypto_aes_aesni.c
SRCS	+=	crypto_aesctr.c
SRCS	+=	crypto_dh.c
SRCS	+=	crypto_dh_group14.c
SRCS	+=	crypto_entropy.c
SRCS	+=	crypto_entropy_rdrand.c
SRCS	+=	crypto_verify_bytes.c
IDIRS	+=	-I${LIBCPERCIVA_DIR}/crypto

# Utility functions
.PATH.c	:	${LIBCPERCIVA_DIR}/util
SRCS	+=	entropy.c
SRCS	+=	getopt.c
SRCS	+=	insecure_memzero.c
SRCS	+=	monoclock.c
SRCS	+=	perftest.c
SRCS	+=	sock.c
SRCS	+=	warnp.c
IDIRS	+=	-I${LIBCPERCIVA_DIR}/util

cflags-crypto_aes_aesni.o:
	@echo '$${CFLAGS_X86_AESNI}'

cflags-crypto_entropy_rdrand.o:
	@echo '$${CFLAGS_X86_RDRAND}'

cflags-sha256_shani.o:
	@echo '$${CFLAGS_X86_SHANI} $${CFLAGS_X86_SSSE3}'

# Special test-only defines.
cflags-proto_crypt.o:
	@echo '-DSTANDALONE_ENC_TESTING'

cflags-main.o:
	@echo '-DSTANDALONE_ENC_TESTING'

# This depends on "all", but we don't want to see any output from that.
perftest:
	@${MAKE} all > /dev/null
	@printf "# nblks\tbsize\ttime\tspeed\talg\n"
	@for N in 1 2 3 4 ; do					\
		./test_standalone_enc $$N |			\
		    grep "blocks" |				\
		    awk -v N="$$N"				\
		    '{printf "%i\t%i\t%.6f\t%.1f\t%i\n",	\
			$$1, $$5, $$6, $$8, N}'; \
	done

.include <bsd.prog.mk>
