# Program name.
PROG	=	test_standalone_enc

# Don't install it.
NOINST	=	1

# Library code required
LDADD_REQ	=	-lcrypto

# Useful relative directories
LIBCPERCIVA_DIR	=	../../libcperciva
PROTO_DIR	=	../../proto

# Main test code
SRCS	=	main.c

# spipe protocol; we need to use special CFLAGS for proto_crypt.c
.PATH.c	:	${PROTO_DIR}
SRCS	+=	proto_crypt.c
IDIRS	+=	-I${PROTO_DIR}

# Fundamental algorithms
SRCS	+=	${LIBCPERCIVA_DIR}/alg/sha256.c
SRCS	+=	${LIBCPERCIVA_DIR}/alg/sha256_arm.c
SRCS	+=	${LIBCPERCIVA_DIR}/alg/sha256_shani.c
SRCS	+=	${LIBCPERCIVA_DIR}/alg/sha256_sse2.c
IDIRS	+=	-I${LIBCPERCIVA_DIR}/alg

# CPU features detection
SRCS	+=	${LIBCPERCIVA_DIR}/cpusupport/cpusupport_arm_sha256.c
SRCS	+=	${LIBCPERCIVA_DIR}/cpusupport/cpusupport_x86_aesni.c
SRCS	+=	${LIBCPERCIVA_DIR}/cpusupport/cpusupport_x86_rdrand.c
SRCS	+=	${LIBCPERCIVA_DIR}/cpusupport/cpusupport_x86_shani.c
SRCS	+=	${LIBCPERCIVA_DIR}/cpusupport/cpusupport_x86_sse2.c
SRCS	+=	${LIBCPERCIVA_DIR}/cpusupport/cpusupport_x86_ssse3.c
IDIRS	+=	-I${LIBCPERCIVA_DIR}/cpusupport

# Crypto code
SRCS	+=	${LIBCPERCIVA_DIR}/crypto/crypto_aes.c
SRCS	+=	${LIBCPERCIVA_DIR}/crypto/crypto_aes_aesni.c
SRCS	+=	${LIBCPERCIVA_DIR}/crypto/crypto_aesctr.c
SRCS	+=	${LIBCPERCIVA_DIR}/crypto/crypto_aesctr_aesni.c
SRCS	+=	${LIBCPERCIVA_DIR}/crypto/crypto_dh.c
SRCS	+=	${LIBCPERCIVA_DIR}/crypto/crypto_dh_group14.c
SRCS	+=	${LIBCPERCIVA_DIR}/crypto/crypto_entropy.c
SRCS	+=	${LIBCPERCIVA_DIR}/crypto/crypto_entropy_rdrand.c
SRCS	+=	${LIBCPERCIVA_DIR}/crypto/crypto_verify_bytes.c
IDIRS	+=	-I${LIBCPERCIVA_DIR}/crypto

# Utility functions
SRCS	+=	${LIBCPERCIVA_DIR}/util/entropy.c
SRCS	+=	${LIBCPERCIVA_DIR}/util/getopt.c
SRCS	+=	${LIBCPERCIVA_DIR}/util/insecure_memzero.c
SRCS	+=	${LIBCPERCIVA_DIR}/util/monoclock.c
SRCS	+=	${LIBCPERCIVA_DIR}/util/perftest.c
SRCS	+=	${LIBCPERCIVA_DIR}/util/sock.c
SRCS	+=	${LIBCPERCIVA_DIR}/util/warnp.c
IDIRS	+=	-I${LIBCPERCIVA_DIR}/util

# Special test-only defines.
CFLAGS.proto_crypt.c= -DSTANDALONE_ENC_TESTING
CFLAGS.main.c= -DSTANDALONE_ENC_TESTING

# This depends on "all", but we don't want to see any output from that.
perftest:
	@${MAKE} all > /dev/null
	@printf "# nblks\tbsize\ttime\tspeed\talg\n"
	@for N in 1 2 3 4 ; do					\
		./test_standalone_enc $$N |			\
		    grep "blocks" |				\
		    awk -v N="$$N"				\
		    '{printf "%i\t%i\t%.6f\t%.6f\t%i\n",	\
			$$1, $$5, $$6, $$8, N}'; \
	done

.include <bsd.prog.mk>
